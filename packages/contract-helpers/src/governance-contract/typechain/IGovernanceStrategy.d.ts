/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface IGovernanceStrategyInterface extends ethers.utils.Interface {
  functions: {
    'PSYS()': FunctionFragment;
    'STK_PSYS()': FunctionFragment;
    'getPropositionPowerAt(address,uint256)': FunctionFragment;
    'getTotalPropositionSupplyAt(uint256)': FunctionFragment;
    'getTotalVotingSupplyAt(uint256)': FunctionFragment;
    'getVotingPowerAt(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'PSYS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STK_PSYS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPropositionPowerAt',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTotalPropositionSupplyAt',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTotalVotingSupplyAt',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVotingPowerAt',
    values: [string, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'PSYS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STK_PSYS', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getPropositionPowerAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTotalPropositionSupplyAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTotalVotingSupplyAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVotingPowerAt',
    data: BytesLike,
  ): Result;

  events: {};
}

export class IGovernanceStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IGovernanceStrategyInterface;

  functions: {
    PSYS(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'PSYS()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    STK_PSYS(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'STK_PSYS()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPropositionPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    'getPropositionPowerAt(address,uint256)'(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalPropositionSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    'getTotalPropositionSupplyAt(uint256)'(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalVotingSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    'getTotalVotingSupplyAt(uint256)'(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    getVotingPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    'getVotingPowerAt(address,uint256)'(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;
  };

  PSYS(overrides?: CallOverrides): Promise<string>;

  'PSYS()'(overrides?: CallOverrides): Promise<string>;

  STK_PSYS(overrides?: CallOverrides): Promise<string>;

  'STK_PSYS()'(overrides?: CallOverrides): Promise<string>;

  getPropositionPowerAt(
    user: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getPropositionPowerAt(address,uint256)'(
    user: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getTotalPropositionSupplyAt(
    blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getTotalPropositionSupplyAt(uint256)'(
    blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getTotalVotingSupplyAt(
    blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getTotalVotingSupplyAt(uint256)'(
    blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getVotingPowerAt(
    user: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getVotingPowerAt(address,uint256)'(
    user: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    PSYS(overrides?: CallOverrides): Promise<string>;

    'PSYS()'(overrides?: CallOverrides): Promise<string>;

    STK_PSYS(overrides?: CallOverrides): Promise<string>;

    'STK_PSYS()'(overrides?: CallOverrides): Promise<string>;

    getPropositionPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getPropositionPowerAt(address,uint256)'(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalPropositionSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getTotalPropositionSupplyAt(uint256)'(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalVotingSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getTotalVotingSupplyAt(uint256)'(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVotingPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getVotingPowerAt(address,uint256)'(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    PSYS(overrides?: CallOverrides): Promise<BigNumber>;

    'PSYS()'(overrides?: CallOverrides): Promise<BigNumber>;

    STK_PSYS(overrides?: CallOverrides): Promise<BigNumber>;

    'STK_PSYS()'(overrides?: CallOverrides): Promise<BigNumber>;

    getPropositionPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getPropositionPowerAt(address,uint256)'(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalPropositionSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getTotalPropositionSupplyAt(uint256)'(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalVotingSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getTotalVotingSupplyAt(uint256)'(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVotingPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getVotingPowerAt(address,uint256)'(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PSYS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PSYS()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STK_PSYS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'STK_PSYS()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPropositionPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getPropositionPowerAt(address,uint256)'(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalPropositionSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getTotalPropositionSupplyAt(uint256)'(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalVotingSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getTotalVotingSupplyAt(uint256)'(
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVotingPowerAt(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getVotingPowerAt(address,uint256)'(
      user: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
