/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface IPegasysStakingHelperInterface extends ethers.utils.Interface {
  functions: {
    'stake(address,uint256,uint8,bytes32,bytes32)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'stake',
    values: [string, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;

  events: {};
}

export class IPegasysStakingHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPegasysStakingHelperInterface;

  functions: {
    stake(
      user: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'stake(address,uint256,uint8,bytes32,bytes32)'(
      user: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;
  };

  stake(
    user: string,
    amount: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'stake(address,uint256,uint8,bytes32,bytes32)'(
    user: string,
    amount: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  callStatic: {
    stake(
      user: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'stake(address,uint256,uint8,bytes32,bytes32)'(
      user: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    stake(
      user: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'stake(address,uint256,uint8,bytes32,bytes32)'(
      user: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    stake(
      user: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'stake(address,uint256,uint8,bytes32,bytes32)'(
      user: string,
      amount: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;
  };
}
